/* Generador de datos ficticios para pruebas de rendimiento */
const mongoose = require('mongoose');
const { connectDB } = require('../config/db');

// Datos base para generar contenido realista
const taskTitles = [
  'Completar documentaci√≥n del proyecto',
  'Revisar c√≥digo del frontend', 
  'Configurar CI/CD pipeline',
  'Optimizar consultas de base de datos',
  'Actualizar dependencias npm',
  'Implementar tests unitarios',
  'Dise√±ar interfaz de usuario',
  'Corregir bugs reportados',
  'Refactorizar componentes legacy',
  'Configurar monitoreo de aplicaci√≥n',
  'Implementar autenticaci√≥n JWT',
  'Crear documentaci√≥n de API',
  'Optimizar rendimiento del servidor',
  'Configurar backup autom√°tico',
  'Implementar notificaciones push',
  'Revisar seguridad de endpoints',
  'Actualizar dise√±o responsive',
  'Configurar entorno de staging',
  'Implementar cache de Redis',
  'Crear dashboard de m√©tricas'
];

const descriptions = [
  'Escribir la documentaci√≥n t√©cnica completa del sistema',
  'Hacer code review de los componentes principales',
  'Implementar pipeline de integraci√≥n continua con GitHub Actions',
  'Mejorar el rendimiento de las consultas m√°s frecuentes',
  'Revisar y actualizar todas las dependencias del proyecto',
  'Crear suite de tests para todos los endpoints de la API',
  'Crear mockups y wireframes para la aplicaci√≥n web',
  'Resolver los issues reportados por el equipo de QA',
  'Modernizar el c√≥digo legacy siguiendo buenas pr√°cticas',
  'Configurar alertas y m√©tricas de rendimiento',
  'Implementar sistema de autenticaci√≥n seguro',
  'Documentar todos los endpoints de la API REST',
  'Analizar y optimizar los cuellos de botella',
  'Configurar respaldos autom√°ticos de la base de datos',
  'Implementar sistema de notificaciones en tiempo real',
  'Auditar la seguridad de todos los endpoints',
  'Mejorar la experiencia en dispositivos m√≥viles',
  'Preparar entorno de pruebas para el equipo',
  'Implementar sistema de cache para mejorar velocidad',
  'Crear dashboard para visualizar m√©tricas importantes'
];

const priorities = ['low', 'medium', 'high'];
const categories = ['desarrollo', 'testing', 'documentaci√≥n', 'infraestructura', 'dise√±o'];

// Funci√≥n para generar fecha aleatoria en los √∫ltimos 6 meses
function randomDate() {
  const start = new Date();
  start.setMonth(start.getMonth() - 6);
  const end = new Date();
  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
}

// Funci√≥n para generar un todo ficticio
function generateFakeTodo() {
  const titleIndex = Math.floor(Math.random() * taskTitles.length);
  const descIndex = Math.floor(Math.random() * descriptions.length);
  
  return {
    title: taskTitles[titleIndex] + ` #${Math.floor(Math.random() * 1000)}`,
    description: descriptions[descIndex],
    completed: Math.random() < 0.4, // 40% completadas
    priority: priorities[Math.floor(Math.random() * priorities.length)],
    category: categories[Math.floor(Math.random() * categories.length)],
    createdAt: randomDate(),
    updatedAt: randomDate()
  };
}

async function generateFakeData(count = 1000) {
  try {
    await connectDB();
    
    const Todo = mongoose.models.Todo;
    
    console.log(`üöÄ Generando ${count} todos ficticios...`);
    
    // Limpiar datos existentes
    await Todo.deleteMany({});
    console.log('‚úÖ Datos existentes eliminados');
    
    // Generar datos en lotes para mejor rendimiento
    const batchSize = 100;
    let totalInserted = 0;
    
    for (let i = 0; i < count; i += batchSize) {
      const batch = [];
      const currentBatchSize = Math.min(batchSize, count - i);
      
      for (let j = 0; j < currentBatchSize; j++) {
        batch.push(generateFakeTodo());
      }
      
      await Todo.insertMany(batch);
      totalInserted += batch.length;
      
      // Mostrar progreso
      const progress = Math.round((totalInserted / count) * 100);
      console.log(`üìä Progreso: ${totalInserted}/${count} (${progress}%)`);
    }
    
    console.log(`‚úÖ Generaci√≥n completada: ${totalInserted} todos creados`);
    
    // Mostrar estad√≠sticas
    const stats = await Todo.aggregate([
      {
        $group: {
          _id: null,
          total: { $sum: 1 },
          completed: { $sum: { $cond: ['$completed', 1, 0] } },
          pending: { $sum: { $cond: ['$completed', 0, 1] } },
          highPriority: { $sum: { $cond: [{ $eq: ['$priority', 'high'] }, 1, 0] } },
          mediumPriority: { $sum: { $cond: [{ $eq: ['$priority', 'medium'] }, 1, 0] } },
          lowPriority: { $sum: { $cond: [{ $eq: ['$priority', 'low'] }, 1, 0] } }
        }
      }
    ]);
    
    if (stats.length > 0) {
      const stat = stats[0];
      console.log('\nüìà ESTAD√çSTICAS GENERADAS:');
      console.log(`   Total: ${stat.total}`);
      console.log(`   Completadas: ${stat.completed} (${Math.round(stat.completed/stat.total*100)}%)`);
      console.log(`   Pendientes: ${stat.pending} (${Math.round(stat.pending/stat.total*100)}%)`);
      console.log(`   Alta prioridad: ${stat.highPriority}`);
      console.log(`   Media prioridad: ${stat.mediumPriority}`);
      console.log(`   Baja prioridad: ${stat.lowPriority}`);
    }
    
  } catch (error) {
    console.error('‚ùå Error generando datos:', error.message);
    process.exitCode = 1;
  } finally {
    await mongoose.connection.close();
  }
}

// Leer par√°metro de l√≠nea de comandos para cantidad
const count = parseInt(process.argv[2]) || 1000;

console.log(`üéØ Iniciando generaci√≥n de ${count} todos ficticios...`);
generateFakeData(count);
